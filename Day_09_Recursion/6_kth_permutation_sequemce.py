'''
####################### Kth permutation sequence #############################
The set [1, 2, 3, ..., n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.


leetcode : https://leetcode.com/problems/permutation-sequence/

'''


# solution
# approach : recursion
#
from math import factorial as fac

class Solution:
    def getPermutation(self, n: int, k: int) -> str:
        x = [i for i in range(1, n+1)]              # store all the digits

        def comb(nums, kk):

            digits = set(nums)                    # store all the digits

            if len(digits) == 1 or kk <= 0:       # if there is only one digit or kk is 0
                return sorted(nums)               # return the sorted digits (the first sequence generated by digits)

            total_comb = fac(len(digits))         # total number of combinations
            nums.sort()                           # sort the digits

            per_comb = total_comb // len(digits)  # number of combinations for each digit

            index = kk // per_comb                # index of the digit to included next in the sequence

            digits.remove(nums[index])            # remove the digit from the set

            return [nums[index]] + comb(list(digits), kk - per_comb * index) # return the sequence and call the function again for the remaining digits after reducing kk


        ans = comb(x, k-1)                              # get the kth permutation, it will be at k-1th position
        return "".join(map(str, ans))